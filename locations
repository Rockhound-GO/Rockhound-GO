import React, { useState, useEffect } from 'react';
import { MapPin, Gem, ChevronDown, ChevronUp, Image as ImageIcon, Search, Filter } from 'lucide-react';

// Placeholder for image fallback
const PLACEHOLDER_IMAGE_URL = (text) => `https://placehold.co/600x400/2D3748/E2E8F0?text=${encodeURIComponent(text)}`;

// Mock Data (from your provided snippet)
const initialMockRockhoundingLocations = [
    { id: '1', name: 'Topaz Mountain', lat: 39.7275, lng: -113.2314, type: 'Volcanic', description: 'Famous for its topaz, red beryl, and other minerals. Requires digging and sifting.', minerals: ['Topaz', 'Red Beryl', 'Obsidian', 'Hematite'], images: ['https://images.unsplash.com/photo-1587398309830-9297410029cf?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8dG9wYXp8ZW58MHx8MHx8fDA%3D&auto=format&fit=crop&w=500&q=60', 'https://images.unsplash.com/photo-1618630676950-f8bd34077137?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8NHx8bWluZXJhbHMlMjByZWR8ZW58MHx8MHx8fDA%3D&auto=format&fit=crop&w=500&q=60'], difficulty: 'Moderate', access: 'Public, some areas may require permits', tools: ['Shovel', 'Sieve', 'Rock Hammer'] },
    { id: '2', name: 'Dugway Geode Beds', lat: 40.2444, lng: -112.7333, type: 'Sedimentary', description: 'Known for its abundant geodes containing quartz crystals. Relatively easy to find surface geodes.', minerals: ['Geodes', 'Quartz', 'Chalcedony'], images: ['https://images.unsplash.com/photo-1598574034144-057e95090871?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MXx8Z2VvZGV8ZW58MHx8MHx8fDA%3D&auto=format&fit=crop&w=500&q=60', 'https://images.unsplash.com/photo-1550940099-9486a2862303?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8cXVhcnR6JTIwY3J5c3RhbHxlbnwwfHwwfHx8MA%3D%3D&auto=format&fit=crop&w=500&q=60'], difficulty: 'Easy', access: 'BLM land, open to public', tools: ['Rock Hammer', 'Safety Glasses'] },
    { id: '3', name: 'U-Dig Fossil Quarry', lat: 39.8563, lng: -112.1831, type: 'Sedimentary', description: 'A private quarry where visitors can dig for trilobite fossils. Fee required.', minerals: ['Trilobites', 'Brachiopods'], images: ['https://images.unsplash.com/photo-1580601192054-53999512788b?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MXx8Zm9zc2lsfGVufDB8fDB8fHww&auto=format&fit=crop&w=500&q=60', 'https://images.unsplash.com/photo-1589634670001-348099311002?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8dHJpbG9iaXRlfGVufDB8fDB8fHww&auto=format&fit=crop&w=500&q=60'], difficulty: 'Easy to Moderate', access: 'Private, fee-based', tools: ['Rock Hammer', 'Chisel', 'Safety Glasses'] },
    { id: '4', name: 'Little Drum Mountains', lat: 39.2950, lng: -113.4119, type: 'Metamorphic & Igneous', description: 'Offers a variety of minerals including garnets and bixbyite. Can be remote.', minerals: ['Garnet', 'Bixbyite', 'Pseudobrookite'], images: ['https://images.unsplash.com/photo-1600540990090-8500686133a8?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MXx8Z2FybmV0JTIwY3J5c3RhbHxlbnwwfHwwfHx8MA%3D%3D&auto=format&fit=crop&w=500&q=60', 'https://images.unsplash.com/photo-1611933713999-15a278114dd4?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MXx8bWluZXJhbCUyMHNwZWNpbWVufGVufDB8fDB8fHww&auto=format&fit=crop&w=500&q=60'], difficulty: 'Moderate to Difficult', access: 'Public, remote areas', tools: ['Rock Hammer', 'GPS', '4WD Vehicle Recommended'] },
];

// Main App Component
function App() {
    const [locations, setLocations] = useState(initialMockRockhoundingLocations);
    const [searchTerm, setSearchTerm] = useState('');
    const [selectedLocation, setSelectedLocation] = useState(null);
    const [imageErrorCache, setImageErrorCache] = useState({}); // To track image loading errors

    // Handle image loading errors
    const handleImageError = (locationId, imageIndex, locationName) => {
        setImageErrorCache(prev => ({
            ...prev,
            [`${locationId}-${imageIndex}`]: PLACEHOLDER_IMAGE_URL(`Image for ${locationName} not available`)
        }));
    };

    // Filter locations based on search term
    const filteredLocations = locations.filter(location =>
        location.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        location.minerals.some(mineral => mineral.toLowerCase().includes(searchTerm.toLowerCase())) ||
        location.type.toLowerCase().includes(searchTerm.toLowerCase())
    );

    // Toggle expanded view for a location
    const toggleSelectedLocation = (locationId) => {
        setSelectedLocation(prevSelected => prevSelected === locationId ? null : locationId);
    };
    
    // Effect to preload images and handle errors (optional, but good practice)
    useEffect(() => {
        initialMockRockhoundingLocations.forEach(loc => {
            loc.images.forEach((imgUrl, index) => {
                if (imgUrl && !imgUrl.startsWith('https://placehold.co')) { // Don't try to preload placeholders
                    const img = new Image();
                    img.src = imgUrl;
                    img.onerror = () => handleImageError(loc.id, index, loc.name);
                }
            });
        });
    }, []);


    return (
        <div className="min-h-screen bg-gradient-to-br from-slate-900 to-slate-800 text-gray-100 font-sans p-4 md:p-8">
            <header className="mb-8 text-center">
                <h1 className="text-4xl md:text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-amber-400 to-orange-500 flex items-center justify-center space-x-2">
                    <Gem size={48} className="text-amber-400" />
                    <span>Rockhound GO</span>
                </h1>
                <p className="text-slate-400 mt-2 text-lg">Discover & Explore Rockhounding Locations</p>
            </header>

            {/* Search and Filter Bar */}
            <div className="mb-8 max-w-2xl mx-auto">
                <div className="relative flex items-center">
                    <Input
                        type="text"
                        placeholder="Search locations, minerals, types..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        icon={<Search size={20} className="text-slate-400" />}
                    />
                </div>
                {/* Future filter button could go here */}
            </div>
            
            {/* Location Grid / List */}
            {filteredLocations.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {filteredLocations.map(location => (
                        <LocationCard 
                            key={location.id} 
                            location={location}
                            isSelected={selectedLocation === location.id}
                            onToggleExpand={() => toggleSelectedLocation(location.id)}
                            imageErrorCache={imageErrorCache}
                            onImageError={handleImageError}
                        />
                    ))}
                </div>
            ) : (
                <div className="text-center py-12">
                    <ImageIcon size={64} className="mx-auto text-slate-500 mb-4" />
                    <p className="text-xl text-slate-400">No locations found matching your search.</p>
                    <p className="text-slate-500">Try a different search term or clear your search.</p>
                </div>
            )}

            <footer className="mt-12 text-center text-slate-500 text-sm">
                <p>&copy; {new Date().getFullYear()} Rockhound GO. Happy Hounding!</p>
            </footer>
        </div>
    );
}

// Custom Input component to mimic shadcn/ui style
function Input({ type = "text", placeholder, value, onChange, icon }) {
    return (
        <div className="relative w-full">
            {icon && <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">{icon}</div>}
            <input
                type={type}
                placeholder={placeholder}
                value={value}
                onChange={onChange}
                className={`w-full p-3 ${icon ? 'pl-10' : ''} rounded-lg bg-slate-700 border border-slate-600 text-gray-100 focus:ring-2 focus:ring-amber-500 focus:border-amber-500 outline-none transition-colors duration-200 placeholder-slate-400`}
            />
        </div>
    );
}


// Location Card Component
function LocationCard({ location, isSelected, onToggleExpand, imageErrorCache, onImageError }) {
    const { id, name, type, minerals, images, description, difficulty, access, tools } = location;
    const [currentImageIndex, setCurrentImageIndex] = useState(0);

    const nextImage = (e) => {
        e.stopPropagation(); // Prevent card click when changing image
        setCurrentImageIndex((prevIndex) => (prevIndex + 1) % images.length);
    };

    const prevImage = (e) => {
        e.stopPropagation();
        setCurrentImageIndex((prevIndex) => (prevIndex - 1 + images.length) % images.length);
    };
    
    const displayedImage = imageErrorCache[`${id}-${currentImageIndex}`] || images[currentImageIndex] || PLACEHOLDER_IMAGE_URL(name);

    return (
        <div 
            className={`bg-slate-800 shadow-xl rounded-xl overflow-hidden transition-all duration-300 ease-in-out transform hover:scale-105 cursor-pointer border border-slate-700 hover:border-amber-500/50 ${isSelected ? 'ring-2 ring-amber-500 scale-105' : ''}`}
            onClick={onToggleExpand}
        >
            {/* Image Carousel */}
            <div className="relative w-full h-56 group">
                <img 
                    src={displayedImage}
                    alt={`${name} - Image ${currentImageIndex + 1}`} 
                    className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
                    onError={() => onImageError(id, currentImageIndex, name)}
                />
                {images && images.length > 1 && (
                    <>
                        <button 
                            onClick={prevImage}
                            className="absolute left-2 top-1/2 -translate-y-1/2 bg-black/50 text-white p-2 rounded-full hover:bg-black/75 transition-opacity opacity-0 group-hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-amber-400"
                            aria-label="Previous image"
                        >
                            <ChevronDown size={20} className="transform rotate-90" />
                        </button>
                        <button 
                            onClick={nextImage}
                            className="absolute right-2 top-1/2 -translate-y-1/2 bg-black/50 text-white p-2 rounded-full hover:bg-black/75 transition-opacity opacity-0 group-hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-amber-400"
                            aria-label="Next image"
                        >
                            <ChevronUp size={20} className="transform rotate-90" />
                        </button>
                        <div className="absolute bottom-2 left-1/2 -translate-x-1/2 bg-black/50 text-white text-xs px-2 py-1 rounded-full">
                            {currentImageIndex + 1} / {images.length}
                        </div>
                    </>
                )}
                {!images || images.length === 0 && (
                     <div className="absolute inset-0 flex items-center justify-center bg-slate-700">
                        <ImageIcon size={48} className="text-slate-500" />
                    </div>
                )}
            </div>

            <div className="p-5">
                <h3 className="text-2xl font-semibold text-amber-400 mb-2 flex items-center">
                    <MapPin size={20} className="mr-2 text-orange-500" />
                    {name}
                </h3>
                <p className="text-sm text-slate-400 mb-1"><span className="font-medium text-slate-300">Type:</span> {type}</p>
                <p className="text-sm text-slate-400 mb-3"><span className="font-medium text-slate-300">Difficulty:</span> {difficulty}</p>

                <div className="mb-3">
                    <h4 className="text-md font-medium text-slate-300 mb-1 flex items-center">
                        <Gem size={16} className="mr-2 text-sky-400" /> Minerals:
                    </h4>
                    <div className="flex flex-wrap gap-2">
                        {minerals.slice(0, 3).map(mineral => (
                            <span key={mineral} className="bg-slate-700 text-sky-300 text-xs px-2 py-1 rounded-full">{mineral}</span>
                        ))}
                        {minerals.length > 3 && (
                             <span className="bg-slate-600 text-slate-300 text-xs px-2 py-1 rounded-full">+{minerals.length - 3} more</span>
                        )}
                    </div>
                </div>
                
                <button 
                    className="w-full mt-2 text-center text-amber-400 hover:text-amber-300 font-medium py-2 rounded-lg flex items-center justify-center"
                    aria-expanded={isSelected}
                >
                    {isSelected ? 'Show Less' : 'Show More'}
                    {isSelected ? <ChevronUp size={20} className="ml-2" /> : <ChevronDown size={20} className="ml-2" />}
                </button>

                {/* Expandable Content */}
                {isSelected && (
                    <div className="mt-4 pt-4 border-t border-slate-700 animate-fadeIn">
                        <h4 className="text-md font-medium text-slate-300 mb-1">Description:</h4>
                        <p className="text-sm text-slate-400 mb-3">{description || "No description available."}</p>
                        
                        <h4 className="text-md font-medium text-slate-300 mb-1">Access:</h4>
                        <p className="text-sm text-slate-400 mb-3">{access || "Access information not available."}</p>

                        <h4 className="text-md font-medium text-slate-300 mb-1">Recommended Tools:</h4>
                        {tools && tools.length > 0 ? (
                            <ul className="list-disc list-inside text-sm text-slate-400 space-y-1">
                                {tools.map(tool => <li key={tool}>{tool}</li>)}
                            </ul>
                        ) : (
                            <p className="text-sm text-slate-400">Tool recommendations not available.</p>
                        )}
                        
                        {minerals.length > 3 && (
                            <div className="mt-3">
                                <h4 className="text-md font-medium text-slate-300 mb-1">All Minerals:</h4>
                                <div className="flex flex-wrap gap-2">
                                    {minerals.map(mineral => (
                                        <span key={mineral} className="bg-slate-700 text-sky-300 text-xs px-2 py-1 rounded-full">{mineral}</span>
                                    ))}
                                </div>
                            </div>
                        )}
                    </div>
                )}
            </div>
        </div>
    );
}

// Add a simple CSS animation for fadeIn (Tailwind doesn't have this by default for conditional rendering)
// You would typically put this in your global CSS file.
const styleSheet = document.createElement("style");
styleSheet.type = "text/css";
styleSheet.innerText = `
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    .animate-fadeIn {
        animation: fadeIn 0.3s ease-out forwards;
    }
    body { margin: 0; font-family: 'Inter', sans-serif; } /* Ensure Inter font is used if available */
`;
document.head.appendChild(styleSheet);

// Load Tailwind CSS via CDN (for this self-contained example)
// In a real project, Tailwind would be part of your build process.
const tailwindScript = document.createElement('script');
tailwindScript.src = 'https://cdn.tailwindcss.com';
document.head.appendChild(tailwindScript);

// Load Inter font
const fontLink = document.createElement('link');
fontLink.href = 'https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap';
fontLink.rel = 'stylesheet';
document.head.appendChild(fontLink);


export default App;
